#!/usr/bin/env python

# Copyright (c) 2019 Intel Labs.
#
# authors: Frederik Pasch
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
# This ROS node converts a Autoware VehicleCmd to an AckermannDrive message
#
# If data is sent out can be controlled by topic /actuator_data_forwarding_active

import rospy, math
from ackermann_msgs.msg import AckermannDrive
from autoware_msgs.msg import VehicleCmd
from std_msgs.msg import Bool

pub = rospy.Publisher("/carla/ego_vehicle/ackermann_cmd", AckermannDrive, queue_size=1)
max_steering_angle_rad = 1.22
actuator_data_forwarding_active = True

def callback(data):
    global max_steering_angle_rad
    global actuator_data_forwarding_active
    if not actuator_data_forwarding_active:
        return
    msg = AckermannDrive()
    msg.speed = data.ctrl_cmd.linear_velocity
    msg.acceleration = data.ctrl_cmd.linear_acceleration

    msg.steering_angle = data.ctrl_cmd.steering_angle/max_steering_angle_rad
    if msg.steering_angle >= max_steering_angle_rad:
       msg.steering_angle = max_steering_angle_rad
    elif msg.steering_angle < -max_steering_angle_rad:
       msg.steering_angle = -max_steering_angle_rad

    pub.publish(msg)

def disableCallback(data):
    global actuator_data_forwarding_active
    actuator_data_forwarding_active = data.data
    rospy.loginfo("Forward actuator data set to %d", actuator_data_forwarding_active)

def vehiclecmd_to_ackermanndrive():
    rospy.init_node('vehiclecmd_to_ackermanndrive')
    max_steering_angle_rad = rospy.get_param('~max_steering_angle_rad', 1.22)
    rospy.Subscriber("/vehicle_cmd", VehicleCmd, callback, queue_size=1)
    rospy.Subscriber("/actuator_data_forwarding_active", Bool, disableCallback, queue_size=1)
    rospy.spin()

if __name__ == '__main__':
    vehiclecmd_to_ackermanndrive()
